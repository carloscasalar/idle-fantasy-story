// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: idlefantasystory/v1/idlefantasystory.proto

package idlefantasystoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/carloscasalar/idle-fantasy-story/pkg/idlefantasystory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoryServiceName is the fully-qualified name of the StoryService service.
	StoryServiceName = "idlefantasystory.v1.StoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoryServiceGetWorldStateProcedure is the fully-qualified name of the StoryService's
	// GetWorldState RPC.
	StoryServiceGetWorldStateProcedure = "/idlefantasystory.v1.StoryService/GetWorldState"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storyServiceServiceDescriptor             = v1.File_idlefantasystory_v1_idlefantasystory_proto.Services().ByName("StoryService")
	storyServiceGetWorldStateMethodDescriptor = storyServiceServiceDescriptor.Methods().ByName("GetWorldState")
)

// StoryServiceClient is a client for the idlefantasystory.v1.StoryService service.
type StoryServiceClient interface {
	// Retrieves the current state of the world.
	GetWorldState(context.Context, *connect.Request[v1.GetWorldStateRequest]) (*connect.Response[v1.GetWorldStateResponse], error)
}

// NewStoryServiceClient constructs a client for the idlefantasystory.v1.StoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storyServiceClient{
		getWorldState: connect.NewClient[v1.GetWorldStateRequest, v1.GetWorldStateResponse](
			httpClient,
			baseURL+StoryServiceGetWorldStateProcedure,
			connect.WithSchema(storyServiceGetWorldStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storyServiceClient implements StoryServiceClient.
type storyServiceClient struct {
	getWorldState *connect.Client[v1.GetWorldStateRequest, v1.GetWorldStateResponse]
}

// GetWorldState calls idlefantasystory.v1.StoryService.GetWorldState.
func (c *storyServiceClient) GetWorldState(ctx context.Context, req *connect.Request[v1.GetWorldStateRequest]) (*connect.Response[v1.GetWorldStateResponse], error) {
	return c.getWorldState.CallUnary(ctx, req)
}

// StoryServiceHandler is an implementation of the idlefantasystory.v1.StoryService service.
type StoryServiceHandler interface {
	// Retrieves the current state of the world.
	GetWorldState(context.Context, *connect.Request[v1.GetWorldStateRequest]) (*connect.Response[v1.GetWorldStateResponse], error)
}

// NewStoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoryServiceHandler(svc StoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storyServiceGetWorldStateHandler := connect.NewUnaryHandler(
		StoryServiceGetWorldStateProcedure,
		svc.GetWorldState,
		connect.WithSchema(storyServiceGetWorldStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/idlefantasystory.v1.StoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoryServiceGetWorldStateProcedure:
			storyServiceGetWorldStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoryServiceHandler struct{}

func (UnimplementedStoryServiceHandler) GetWorldState(context.Context, *connect.Request[v1.GetWorldStateRequest]) (*connect.Response[v1.GetWorldStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("idlefantasystory.v1.StoryService.GetWorldState is not implemented"))
}
